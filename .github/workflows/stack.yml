# https://markkarpov.com/post/github-actions-for-haskell-ci.html

name: Stack build

on:
  push:
    branches: [ master ]
    tags:     [ v* ]
  pull_request:
    types: [ opened, synchronize ]

jobs:
  build:
    name: GHC ${{ matrix.ghc }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Note: check release logic below when changing the matrix!
        ghc: ['9.12', '9.10', '9.8', '9.6', '9.4', '9.2.8', '9.0.2', '8.10.7', '8.8.4', '8.6.5', '8.4.4']
        os: [ubuntu-latest]
        include:
          - os: macOS-latest
            ghc: '9.12'
          - os: windows-latest
            ghc: '9.12'
    env:
      STACK_FLAGS: --stack-yaml stack-${{ matrix.ghc }}.yaml --no-terminal --color always --system-ghc
      STACK_YAML: stack-${{ matrix.ghc }}.yaml
      # STACK_BUILD: stack build ${{ STACK_FLAGS }}  ## invalid
      # STACK_BUILD: stack build ${{ env.STACK_FLAGS }}  ## also invalid

    # Needed for Windows to make piping (... >> ...) and evaluation ( $(...) ) work.
    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v5

      - name: Setup Haskell
        uses: haskell-actions/setup@v2
        id:   haskell-setup  # <-- self-chosen identifier
        with:
          ghc-version: ${{ matrix.ghc }}
          enable-stack: true
          cabal-update: false

      # - name: Environment settings based on the setup
      #   shell: bash
      #   run: |
      #     echo "runner.os     = ${{ runner.os }}"
      #     echo "ghc-version   = ${{ steps.haskell-setup.outputs.ghc-version   }}"
      #     echo "cabal-version = ${{ steps.haskell-setup.outputs.cabal-version }}"
      #     echo "stack-version = ${{ steps.haskell-setup.outputs.stack-version }}"
      #     echo "ghc-path      = ${{ steps.haskell-setup.outputs.ghc-path      }}"
      #     echo "cabal-path    = ${{ steps.haskell-setup.outputs.cabal-path    }}"
      #     echo "stack-path    = ${{ steps.haskell-setup.outputs.stack-path    }}"
      #     echo "ghc-exe       = ${{ steps.haskell-setup.outputs.ghc-exe       }}"
      #     echo "cabal-exe     = ${{ steps.haskell-setup.outputs.cabal-exe     }}"
      #     echo "stack-exe     = ${{ steps.haskell-setup.outputs.stack-exe     }}"
      #     echo "cabal-store   = ${{ steps.haskell-setup.outputs.cabal-store   }}"
      #     echo "stack-root    = ${{ steps.haskell-setup.outputs.stack-root    }}"
      #     GHC_VERSION=${{ steps.haskell-setup.outputs.ghc-version }}
      #     STACK_VERSION=${{ steps.haskell-setup.outputs.stack-version }}
      #     echo "GHC_VERSION=${GHC_VERSION}"     >> "${GITHUB_ENV}"
      #     echo "STACK_VERSION=${STACK_VERSION}" >> "${GITHUB_ENV}"

      #   # STACK_YAML=stack-${GHC_VERSION}.yaml
      #   # STACK_FLAGS="--stack-yaml ${STACK_YAML} --system-ghc --no-terminal --color always"
      #   # echo "STACK_YAML=${STACK_YAML}"       >> "${GITHUB_ENV}"
      #   # echo "STACK_FLAGS=${STACK_FLAGS}"     >> "${GITHUB_ENV}"

      - name: Restore cache
        uses: actions/cache/restore@v4
        id: cache
        env:
          key: ${{ runner.os }}-stack-${{ steps.haskell-setup.outputs.stack-version }}-ghc-${{ steps.haskell-setup.outputs.ghc-version }}
        with:
          path: |
            ${{ steps.haskell-setup.outputs.stack-root }}
            .stack-work
          key:          ${{ env.key }}-commit-${{ github.sha }}
          restore-keys: ${{ env.key }}-
            # https://github.com/commercialhaskell/stack/issues/5866
            # Don't restore cached builds from older GHC versions.

      - name: Build dependencies.
        # run: stack build --stack-yaml stack-${{ matrix.ghc }}.yaml --no-terminal --color always --system-ghc --only-dependencies
        run: stack build ${{ env.STACK_FLAGS }} --only-dependencies
        # Windows does not like this:
        # run: ${STACK_BUILD} --only-dependencies
          # --test

      - name: Build agda2lagda w/o tests.
        run: stack build ${{ env.STACK_FLAGS }}
          #  --copy-bins

      - name: Build agda2lagda and run tests.
        run: stack build ${{ env.STACK_FLAGS }} --test
        if: matrix.ghc != '8.4.4'
        # Fall back to string comparison as version-comparison does not seem to work.
        # Simply exclude the versions that do not support
        # if: matrix.ghc >= 8.6  ## >= does not seem to work out-of-the-box for version
          # goldplate is only reasonably supported from stack-8.6.5.yaml

      - name: Run agda2lagda.
        run: stack exec ${{ env.STACK_FLAGS }} agda2lagda -- --help

      - name: Cache dependencies
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ steps.haskell-setup.outputs.stack-root }}
            .stack-work
          key: ${{ steps.cache.outputs.cache-primary-key }}


      ## Release
      ########################################################################

      - name: Source tarball creation.
        # Conditional to ensure this deployment is only run once per action.
        if: >-
          startsWith(github.ref, 'refs/tags/v')
          && matrix.ghc == '9.12'
        run: |
          DIST_TGZ=$(cabal sdist | tail -1)
          echo "DIST_TGZ=${DIST_TGZ}" >> "${GITHUB_ENV}"

      - name: Source tarball release.
        if: >-
          startsWith(github.ref, 'refs/tags/v')
          && matrix.ghc == '9.12'
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          prerelease: true
          files: |
            ${{ env.DIST_TGZ }}

      - name: Linux release preparation.
        if: >-
          startsWith(github.ref, 'refs/tags/v')
          && runner.os == 'Linux'
        run: |
          AGDA2LAGDA_EXE=$(stack path --local-install-root ${{ env.STACK_FLAGS }})/bin/agda2lagda
          AGDA2LAGDA_VERSION=$("${AGDA2LAGDA_EXE}" --numeric-version)
          AGDA2LAGDA_BIN=agda2lagda-${AGDA2LAGDA_VERSION}-linux.binary
          cp -p "${AGDA2LAGDA_EXE}" "${AGDA2LAGDA_BIN}"
          # Save env variables for the next step
          echo "AGDA2LAGDA_BIN=${AGDA2LAGDA_BIN}" >> "${GITHUB_ENV}"

      - name: Linux release.
        if: >-
          startsWith(github.ref, 'refs/tags/v')
          && runner.os == 'Linux'
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          prerelease: true
          files: |
            ${{ env.AGDA2LAGDA_BIN }}

      - name: Mac release preparation.
        if: >-
          startsWith(github.ref, 'refs/tags/v')
          && runner.os == 'macOS'
        run: |
          AGDA2LAGDA_EXE=$(stack path --local-install-root ${{ env.STACK_FLAGS }})/bin/agda2lagda
          AGDA2LAGDA_VERSION=$("${AGDA2LAGDA_EXE}" --numeric-version)
          AGDA2LAGDA_BIN=agda2lagda-${AGDA2LAGDA_VERSION}-mac.binary
          AGDA2LAGDA_PKG=agda2lagda-${AGDA2LAGDA_VERSION}-mac.pkg
          # Raw Mac binary
          cp -p "${AGDA2LAGDA_EXE}" "${AGDA2LAGDA_BIN}"
          # Build Mac package
          mkdir -p tmp/usr/local/bin
          cp -p "${AGDA2LAGDA_EXE}" tmp/usr/local/bin/agda2lagda
          pkgbuild \
            --root tmp \
            --identifier abel.andreas.agda2lagda.pkg \
            --version "${AGDA2LAGDA_VERSION}" \
            --install-location / \
            --ownership recommended \
            "${AGDA2LAGDA_PKG}"
          # Save env variables for the next step
          echo "AGDA2LAGDA_BIN=${AGDA2LAGDA_BIN}" >> "${GITHUB_ENV}"
          echo "AGDA2LAGDA_PKG=${AGDA2LAGDA_PKG}" >> "${GITHUB_ENV}"

      - name: Mac release.
        if: >-
          startsWith(github.ref, 'refs/tags/v')
          && runner.os == 'macOS'
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          prerelease: true
          files: |
            ${{ env.AGDA2LAGDA_BIN }}
            ${{ env.AGDA2LAGDA_PKG }}


      - name: Windows release preparation.
        if: >-
          startsWith(github.ref, 'refs/tags/v')
          && runner.os == 'Windows'
        shell: bash
        run: |
          AGDA2LAGDA_EXE=$(stack path --local-install-root ${{ env.STACK_FLAGS }})/bin/agda2lagda
          AGDA2LAGDA_VERSION=$("${AGDA2LAGDA_EXE}" --numeric-version)
          AGDA2LAGDA_VERSION_EXE=agda2lagda-${AGDA2LAGDA_VERSION}.exe
          cp -p "${AGDA2LAGDA_EXE}.exe" "${AGDA2LAGDA_VERSION_EXE}"
          # Save env variables for the next step
          echo "AGDA2LAGDA_VERSION_EXE=${AGDA2LAGDA_VERSION_EXE}" >> "${GITHUB_ENV}"

      - name: Windows release.
        if: >-
          startsWith(github.ref, 'refs/tags/v')
          && runner.os == 'Windows'
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          prerelease: true
          files: |
            ${{ env.AGDA2LAGDA_VERSION_EXE }}
